{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/maybes-and-decoders-elm/","result":{"data":{"site":{"siteMetadata":{"title":"Jack Murphy","disqusShortname":"murpjack"}},"markdownRemark":{"id":"e6ca41d7-bebc-5571-8f24-1ddce7e94ec6","html":"<p>The Maybe value in Elm is useful when parsing a String into a floating point number, or when requesting data that may not exist from a server.\nThe response data in an Elm app is decoded by an Elm application and the value can then be handled with relative certainty.</p>\n<p>This example of a Maybe value comes from the Elm documentation.</p>\n<p><strong>Elm in the terminal ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\">String<span class=\"token operator\">.</span>toFloat\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">function</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> String <span class=\"token operator\">-</span><span class=\"token operator\">></span> Maybe Float\n\n<span class=\"token operator\">></span> String<span class=\"token operator\">.</span>toFloat “<span class=\"token number\">3.1415</span>”\nJust <span class=\"token number\">3.1415</span> <span class=\"token punctuation\">:</span> Maybe Float\n\n<span class=\"token operator\">></span> String<span class=\"token operator\">.</span>toFloat “<span class=\"token keyword\">abc</span>”\nNothing <span class=\"token punctuation\">:</span> Maybe Float</code></pre></div>\n<p>The string given to <code class=\"language-text\">toFloat</code> may not be a valid number, in which case the output of the toFloat method could be represented by some failure but to say the output is Maybe a float value makes sense.\nA Maybe value can be something or nothing, where both something and nothing cases must be described - generally by using a <code class=\"language-text\">case</code> statement - which is the same as a JS <code class=\"language-text\">switch</code> statement.</p>\n<p><strong>Elm ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">let</span> <span class=\"token hvariable\">maybeFloat</span> <span class=\"token operator\">=</span>\n<span class=\"token constant\">String</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">toFloat</span> “<span class=\"token number\">3.1415</span>”\n\n<span class=\"token keyword\">let</span> <span class=\"token hvariable\">usefulValue</span> <span class=\"token operator\">=</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token hvariable\">maybeFloat</span> <span class=\"token keyword\">of</span>\n\t\t<span class=\"token constant\">Just</span> <span class=\"token hvariable\">floatValue</span> <span class=\"token operator\">-></span>\n\t\t\t<span class=\"token hvariable\">floatValue</span>\n\n\t\t<span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span>\n\t\t\t<span class=\"token number\">1.0</span></code></pre></div>\n<p>This case statement says that in a case where the value is nothing a default value of 1.0 is provided.\nDefault values should be meaningful and should make sense.</p>\n<p><strong>Elm ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n   <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span>\n   <span class=\"token operator\">|</span> <span class=\"token constant\">Nothing</span></code></pre></div>\n<p>Below is an example of some metadata from a markdown blog post.\nValues brought into an Elm app require decoding into Elm type values.</p>\n<p><strong>Markdown blog post</strong></p>\n<p><strong>Markdown ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\n{\n slug: 'maybe-decoders-and-updaters-elm',\n title: 'Maybes, Decoders and updaters in elm',\n tags: ['web'],\n publishDate: '2018-09-12',\n description: 'This is a blog about Maybe values.',\n<span class=\"token title important\">}\n<span class=\"token punctuation\">---</span></span>\nThis is a post about Maybe values.</code></pre></div>\n<p><strong>Elm decoder</strong></p>\n<p><strong>Elm ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- import Decoder as Decode exposing (Decoder)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">a</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">BlogPostMetadata</span> <span class=\"token operator\">=</span>\n   <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">slug</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">title</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">tags</span> <span class=\"token operator\">:</span> <span class=\"token constant\">List</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">publishDate</span> <span class=\"token operator\">:</span> <span class=\"token constant\">IsoString</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">description</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token hvariable\">blogPostMetaDecoder</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Decoder</span> <span class=\"token constant\">BlogPostMetadata</span>\n<span class=\"token hvariable\">blogPostMetaDecoder</span> <span class=\"token operator\">=</span>\n   <span class=\"token hvariable\">Decode.map5</span> <span class=\"token constant\">BlogPostMetadata</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"slug\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"title\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"tags\"</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.list</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"publishDate\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"description\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A Decoder wraps data coming into an Elm application in a Functor and then tries to translate that data into a valid Elm type value.</p>\n<p><code class=\"language-text\">BlogPostMetadata</code> is a constructor that defines metadata from the markdown file above.\nThe markdown data is wrapped in a Decoder called <code class=\"language-text\">blogPostMetaDecoder</code>, which expects certain field values. Given a field name and a decoder, the Decoder should translate the data into an expected Elm value.</p>\n<p>Each field decoder - Decode.field - is separate so the top level decoder performs a transformation called <code class=\"language-text\">map5</code> which takes 5 Decoder values and returns just one Decoder value. <code class=\"language-text\">map</code> is an important feature of both Maybe and Decoder values.</p>\n<p>The <code class=\"language-text\">Decoder</code> type definition looks similar to the <code class=\"language-text\">Just</code> branch in a Maybe type.</p>\n<p>A decoder and a Maybe value perform different functions but each one wraps a value in a functor. This functor is a type of monad.\nA monad Functor has a <code class=\"language-text\">map</code> method and a <code class=\"language-text\">bind</code> method. A wrapped Maybe or Decode value can be transformed using the <code class=\"language-text\">map</code> method available on the monad.\nIt may also handle computations that return nested wrapped values - by using a <code class=\"language-text\">bind</code> method. <code class=\"language-text\">bind</code> exists in Elm on Maybe and Decode values as <code class=\"language-text\">andThen</code>.</p>\n<p>Before learning Elm I wrote a lot of JavaScript and found the <code class=\"language-text\">Maybe.map</code> method confusing as I had only seen <code class=\"language-text\">map</code> used on arrays. The <code class=\"language-text\">map</code> method in each case does much the same thing.</p>\n<p><strong>Elm ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- Maybe</span>\n<span class=\"token hvariable\">map</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span>\n\n<span class=\"token hvariable\">andThen</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span>\n\n\n<span class=\"token comment\">-- Decoders</span>\n<span class=\"token hvariable\">map</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">value</span>\n\n<span class=\"token hvariable\">andThen</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">b</span>\n\n<span class=\"token comment\">-- Also Decoders. Helpful for dealing with optional fields.</span>\n<span class=\"token hvariable\">maybe</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Decoder</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The type signatures in each case are the same apart from the functor wrapping the given value.</p>\n<h2>Definitions</h2>\n<p><code class=\"language-text\">map</code> -> Given a transformation and a functor-wrapped value,\noutput a transformed value wrapped in a functor.</p>\n<p><code class=\"language-text\">andThen</code> -> Given a transformation and a functor-wrapped value,\nescape or flatten the first functor and output another wrapped value.</p>\n<p><strong>Elm decoder with an optional field</strong>\nIn the example below, the <code class=\"language-text\">authorName</code> value may not be included in the blog post metadata so in the UI an author’s name may not be displayed. This value is therefore wrapped in both a Decoder functor and also wrapped in a Maybe value functor and will need to be unwrapped from both Decoder and Maybe.</p>\n<p><strong>Elm ↓</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- import Decoder as Decode exposing (Decoder)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Decoder</span> <span class=\"token hvariable\">a</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">BlogPostMetadata</span> <span class=\"token operator\">=</span>\n   <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">slug</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">title</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">tags</span> <span class=\"token operator\">:</span> <span class=\"token constant\">List</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">publishDate</span> <span class=\"token operator\">:</span> <span class=\"token constant\">IsoString</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">description</span> <span class=\"token operator\">:</span> <span class=\"token constant\">String</span>\n   <span class=\"token comment\">-- authorName is an optional field</span>\n   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">authorName</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">String</span>\n   <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token hvariable\">blogPostMetaDecoder</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Decoder</span> <span class=\"token constant\">BlogPostMetadata</span>\n<span class=\"token hvariable\">blogPostMetaDecoder</span> <span class=\"token operator\">=</span>\n   <span class=\"token hvariable\">Decode.map5</span> <span class=\"token constant\">BlogPostMetadata</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"slug\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"title\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"tags\"</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.list</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"publishDate\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"description\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n       <span class=\"token comment\">-- Their may not be an author field to decode</span>\n       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.maybe</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"authorName\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">authorName</code> field is optional and there is no meaningful default value.\nIn this particular case <code class=\"language-text\">Decode.maybe</code> is well suited to decoding the field, though if there was a meaningful default value a package like <code class=\"language-text\">Json-Decode-Pipeline</code> could be used to neatly handle a missing value.</p>\n<p><a href=\"https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#maybe\">https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#maybe</a></p>\n<p><a href=\"https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/Json-Decode-Pipeline#optional\">https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/Json-Decode-Pipeline#optional</a></p>\n<h2>Summary</h2>\n<p>My reason for writing this article was because I thought it would be useful to understand monads when using Elm, as it is a functional language. I found that understanding monads in great detail is not strictly necessary, however the journey to understanding has prompted me to ask questions at work and read many things. This post became far more practical than I expected.</p>","frontmatter":{"title":"Maybes and Decoders in elm","date":"06 September 2022","description":"I thought it would be useful to understand monads when using Elm, as it is a functional language. I found that...","template":"post"}}},"pageContext":{"slug":"/blog/maybes-and-decoders-elm/","previous":{"node":{"fields":{"slug":"/blog/cn/introduction/"},"frontmatter":{"date":"04 October, 2021","title":"第一个博文 - 介绍","template":null}}},"next":{"node":{"fields":{"slug":"/pages/about/"},"frontmatter":{"date":null,"title":"About me","template":"page"}}}}},"staticQueryHashes":["2841359383","4268105863"]}