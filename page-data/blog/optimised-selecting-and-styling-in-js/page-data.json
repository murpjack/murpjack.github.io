{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/optimised-selecting-and-styling-in-js/","result":{"data":{"site":{"siteMetadata":{"title":"Jack Murphy","disqusShortname":"murpjack"}},"markdownRemark":{"id":"8bb0a37f-fe44-5edb-9fb2-c4f777e5d8ca","html":"<p>This week I have been going through some old code and trying to improve page performance.<br>\nOne significant way to improve performance on a web page or application is by looking at interactions between any javascript and the DOM. This can be a way to make quick improvements to overall performance on a site.</p>\n<p>Google offers a tool called <em>testmysite</em>, which does just that. They let you know site speed and offer improvements.<br>\n<a href=\"https://www.thinkwithgoogle.com/intl/en-gb/feature/testmysite\">https://www.thinkwithgoogle.com/intl/en-gb/feature/testmysite</a></p>\n<p>Also, JSperf (<a href=\"https://jsperf.com/\">https://jsperf.com/</a>) allows you to see how fast different cases perform on different browsers.<br>\nYou can find test cases for basic methods and ideas with a cursory search and adding jsperf to your query.</p>\n<p>This article is just a few ways to edit styles/ select elements in the DOM using javascript and css. In no particular order here are some ideas:</p>\n<ol>\n<li>\n<p><strong>Use CSS selectors to style elements</strong><br>\nDynamically styling the odd DOM element is unavoidable. For these occasions updating we can add/remove classes and use nested or relative css selectors to control any changes.</p>\n<p><strong>JS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> containerArrow <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".container:after\"</span><span class=\"token punctuation\">)</span>\ncontainer<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>border <span class=\"token operator\">=</span> <span class=\"token string\">\"2px solid red\"</span>\ncontainer<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span>\ncontainer<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>marginTop <span class=\"token operator\">=</span> <span class=\"token string\">\"10px\"</span></code></pre></div>\n<p>Alternatively we can achieve the same result by styling this container and pseudo using css a class.</p>\n<p><strong>CSS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.container:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.container--error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.container--error:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using class styles, stored in css, it is more clear what our is happening too.<br>\nHere is a list of selectors to get you started:<br>\n<a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">https://www.w3schools.com/cssref/css_selectors.asp</a></p>\n</li>\n<li><strong>Select an ID, node or class and traverse</strong><br>\nAccording to a few jsperf tests the best way to select an element is by selecting an object by its ID or node (eg. div, or table), or class and traversing to nearby elements.<br>\nThe reason that this is better than selecting individual elements is that there is just one interaction between the DOM and javascript script.<br>\n<a href=\"https://javascript.info/dom-navigation\">https://javascript.info/dom-navigation</a></li>\n<li><strong>Store references to DOM objects in variables</strong><br>\nIf you plan to select an element more than than once you should consider storing a reference of it in a variable. This means that your javascript know what is looking for and where it can find it.</li>\n</ol>\n<p>This article only covers a couple of ways to be more performant, and is by no means exhaustive. Please leave a comment below with any other suggestions.</p>","frontmatter":{"title":"Optimised Selecting and Styling using vanilla JS","date":"28 December 2018","description":"Ways to edit styles/ select elements in the DOM using JavaScript and CSS.","template":"post"}}},"pageContext":{"slug":"/blog/optimised-selecting-and-styling-in-js/","previous":{"node":{"fields":{"slug":"/blog/css-aspect-ratio/"},"frontmatter":{"date":"12 September, 2018","title":"Using Aspect Ratio in CSS","template":"post"}}},"next":{"node":{"fields":{"slug":"/blog/the-state-of-react-in-2019/"},"frontmatter":{"date":"28 March, 2019","title":"The state of React in 2019","template":"post"}}}}},"staticQueryHashes":["2841359383","4268105863"]}